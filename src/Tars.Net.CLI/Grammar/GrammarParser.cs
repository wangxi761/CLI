//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6-rc001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\code\Tars\CLI\src\Gen\Grammar.g4 by ANTLR 4.6.6-rc001

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Tars.Net.CLI {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6-rc001")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, ID=26, Int=27, Float=28, String=29, LineComment=30, BlockComment=31, 
		WS=32;
	public const int
		RULE_tarsDefinitions = 0, RULE_tarsDefinition = 1, RULE_includeDefinition = 2, 
		RULE_moduleDefinition = 3, RULE_memberDefinition = 4, RULE_moduleName = 5, 
		RULE_interfaceDefinition = 6, RULE_methodDefinition = 7, RULE_methodParameterDefinition = 8, 
		RULE_structDefinition = 9, RULE_fieldDefinition = 10, RULE_fieldOption = 11, 
		RULE_fieldValue = 12, RULE_typeDeclaration = 13, RULE_enumDefinition = 14, 
		RULE_enumDeclaration = 15;
	public static readonly string[] ruleNames = {
		"tarsDefinitions", "tarsDefinition", "includeDefinition", "moduleDefinition", 
		"memberDefinition", "moduleName", "interfaceDefinition", "methodDefinition", 
		"methodParameterDefinition", "structDefinition", "fieldDefinition", "fieldOption", 
		"fieldValue", "typeDeclaration", "enumDefinition", "enumDeclaration"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#include'", "'module'", "'{'", "'}'", "';'", "'.'", "'interface'", 
		"'('", "')'", "','", "'out'", "'struct'", "'require'", "'optional'", "'='", 
		"'short'", "'byte'", "'int'", "'string'", "'vector'", "'<'", "'>'", "'map'", 
		"'void'", "'enum'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "ID", "Int", "Float", "String", "LineComment", "BlockComment", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class TarsDefinitionsContext : ParserRuleContext {
		public TarsDefinitionContext[] tarsDefinition() {
			return GetRuleContexts<TarsDefinitionContext>();
		}
		public TarsDefinitionContext tarsDefinition(int i) {
			return GetRuleContext<TarsDefinitionContext>(i);
		}
		public TarsDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tarsDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterTarsDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitTarsDefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarsDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TarsDefinitionsContext tarsDefinitions() {
		TarsDefinitionsContext _localctx = new TarsDefinitionsContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_tarsDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__0 || _la==T__1) {
				{
				{
				State = 32; tarsDefinition();
				}
				}
				State = 37;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TarsDefinitionContext : ParserRuleContext {
		public IncludeDefinitionContext includeDefinition() {
			return GetRuleContext<IncludeDefinitionContext>(0);
		}
		public ModuleDefinitionContext moduleDefinition() {
			return GetRuleContext<ModuleDefinitionContext>(0);
		}
		public TarsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tarsDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterTarsDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitTarsDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarsDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TarsDefinitionContext tarsDefinition() {
		TarsDefinitionContext _localctx = new TarsDefinitionContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_tarsDefinition);
		try {
			State = 40;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38; includeDefinition();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39; moduleDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeDefinitionContext : ParserRuleContext {
		public ITerminalNode String() { return GetToken(GrammarParser.String, 0); }
		public IncludeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIncludeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIncludeDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeDefinitionContext includeDefinition() {
		IncludeDefinitionContext _localctx = new IncludeDefinitionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_includeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(T__0);
			State = 43; Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDefinitionContext : ParserRuleContext {
		public ModuleNameContext moduleName() {
			return GetRuleContext<ModuleNameContext>(0);
		}
		public MemberDefinitionContext[] memberDefinition() {
			return GetRuleContexts<MemberDefinitionContext>();
		}
		public MemberDefinitionContext memberDefinition(int i) {
			return GetRuleContext<MemberDefinitionContext>(i);
		}
		public ModuleDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterModuleDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitModuleDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDefinitionContext moduleDefinition() {
		ModuleDefinitionContext _localctx = new ModuleDefinitionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(T__1);
			State = 46; moduleName(0);
			State = 47; Match(T__2);
			State = 51;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__11) | (1L << T__24))) != 0)) {
				{
				{
				State = 48; memberDefinition();
				}
				}
				State = 53;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 54; Match(T__3);
			State = 58;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__4) {
				{
				{
				State = 55; Match(T__4);
				}
				}
				State = 60;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDefinitionContext : ParserRuleContext {
		public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		public InterfaceDefinitionContext interfaceDefinition() {
			return GetRuleContext<InterfaceDefinitionContext>(0);
		}
		public MemberDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMemberDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMemberDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDefinitionContext memberDefinition() {
		MemberDefinitionContext _localctx = new MemberDefinitionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_memberDefinition);
		try {
			State = 64;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; enumDefinition();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; structDefinition();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 63; interfaceDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleNameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ModuleNameContext moduleName() {
			return GetRuleContext<ModuleNameContext>(0);
		}
		public ModuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterModuleName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitModuleName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleNameContext moduleName() {
		return moduleName(0);
	}

	private ModuleNameContext moduleName(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ModuleNameContext _localctx = new ModuleNameContext(_ctx, _parentState);
		ModuleNameContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_moduleName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 67; Match(ID);
			}
			_ctx.stop = _input.Lt(-1);
			State = 74;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ModuleNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_moduleName);
					State = 69;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 70; Match(T__5);
					State = 71; Match(ID);
					}
					} 
				}
				State = 76;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InterfaceDefinitionContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public MethodDefinitionContext[] methodDefinition() {
			return GetRuleContexts<MethodDefinitionContext>();
		}
		public MethodDefinitionContext methodDefinition(int i) {
			return GetRuleContext<MethodDefinitionContext>(i);
		}
		public InterfaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterInterfaceDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitInterfaceDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDefinitionContext interfaceDefinition() {
		InterfaceDefinitionContext _localctx = new InterfaceDefinitionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_interfaceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(T__6);
			State = 78; Match(ID);
			State = 79; Match(T__2);
			State = 83;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__22) | (1L << T__23) | (1L << ID))) != 0)) {
				{
				{
				State = 80; methodDefinition();
				}
				}
				State = 85;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 86; Match(T__3);
			State = 90;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__4) {
				{
				{
				State = 87; Match(T__4);
				}
				}
				State = 92;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public MethodParameterDefinitionContext[] methodParameterDefinition() {
			return GetRuleContexts<MethodParameterDefinitionContext>();
		}
		public MethodParameterDefinitionContext methodParameterDefinition(int i) {
			return GetRuleContext<MethodParameterDefinitionContext>(i);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_methodDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; typeDeclaration();
			State = 94; Match(ID);
			State = 95; Match(T__7);
			State = 99;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__22) | (1L << T__23) | (1L << ID))) != 0)) {
				{
				{
				State = 96; methodParameterDefinition();
				}
				}
				State = 101;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 102; Match(T__8);
			State = 103; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParameterDefinitionContext : ParserRuleContext {
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public MethodParameterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameterDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMethodParameterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMethodParameterDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterDefinitionContext methodParameterDefinition() {
		MethodParameterDefinitionContext _localctx = new MethodParameterDefinitionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_methodParameterDefinition);
		int _la;
		try {
			State = 122;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__22:
			case T__23:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; typeDeclaration();
				State = 106; Match(ID);
				State = 110;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__9) {
					{
					{
					State = 107; Match(T__9);
					}
					}
					State = 112;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; Match(T__10);
				State = 114; typeDeclaration();
				State = 115; Match(ID);
				State = 119;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__9) {
					{
					{
					State = 116; Match(T__9);
					}
					}
					State = 121;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public FieldDefinitionContext[] fieldDefinition() {
			return GetRuleContexts<FieldDefinitionContext>();
		}
		public FieldDefinitionContext fieldDefinition(int i) {
			return GetRuleContext<FieldDefinitionContext>(i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(T__11);
			State = 125; Match(ID);
			State = 126; Match(T__2);
			State = 130;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Int) {
				{
				{
				State = 127; fieldDefinition();
				}
				}
				State = 132;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 133; Match(T__3);
			State = 137;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__4) {
				{
				{
				State = 134; Match(T__4);
				}
				}
				State = 139;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		public ITerminalNode Int() { return GetToken(GrammarParser.Int, 0); }
		public FieldOptionContext fieldOption() {
			return GetRuleContext<FieldOptionContext>(0);
		}
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public FieldValueContext[] fieldValue() {
			return GetRuleContexts<FieldValueContext>();
		}
		public FieldValueContext fieldValue(int i) {
			return GetRuleContext<FieldValueContext>(i);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_fieldDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(Int);
			State = 141; fieldOption();
			State = 142; typeDeclaration();
			State = 143; Match(ID);
			State = 147;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__14) {
				{
				{
				State = 144; fieldValue();
				}
				}
				State = 149;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 150; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionContext : ParserRuleContext {
		public FieldOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFieldOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFieldOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldOptionContext fieldOption() {
		FieldOptionContext _localctx = new FieldOptionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_fieldOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_la = _input.La(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldValueContext : ParserRuleContext {
		public ITerminalNode Int() { return GetToken(GrammarParser.Int, 0); }
		public ITerminalNode Float() { return GetToken(GrammarParser.Float, 0); }
		public ITerminalNode String() { return GetToken(GrammarParser.String, 0); }
		public FieldValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFieldValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFieldValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldValueContext fieldValue() {
		FieldValueContext _localctx = new FieldValueContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_fieldValue);
		try {
			State = 160;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154; Match(T__14);
				State = 155; Match(Int);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156; Match(T__14);
				State = 157; Match(Float);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 158; Match(T__14);
				State = 159; Match(String);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_typeDeclaration);
		try {
			State = 180;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162; Match(ID);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163; Match(T__15);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 164; Match(T__16);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 4);
				{
				State = 165; Match(T__17);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 5);
				{
				State = 166; Match(T__18);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 6);
				{
				State = 167; Match(T__19);
				State = 168; Match(T__20);
				State = 169; typeDeclaration();
				State = 170; Match(T__21);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 7);
				{
				State = 172; Match(T__22);
				State = 173; Match(T__20);
				State = 174; typeDeclaration();
				State = 175; Match(T__9);
				State = 176; typeDeclaration();
				State = 177; Match(T__21);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 8);
				{
				State = 179; Match(T__23);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public EnumDeclarationContext[] enumDeclaration() {
			return GetRuleContexts<EnumDeclarationContext>();
		}
		public EnumDeclarationContext enumDeclaration(int i) {
			return GetRuleContext<EnumDeclarationContext>(i);
		}
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_enumDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(T__24);
			State = 183; Match(ID);
			State = 184; Match(T__2);
			State = 188;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ID) {
				{
				{
				State = 185; enumDeclaration();
				}
				}
				State = 190;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 191; Match(T__3);
			State = 195;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__4) {
				{
				{
				State = 192; Match(T__4);
				}
				}
				State = 197;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public FieldValueContext[] fieldValue() {
			return GetRuleContexts<FieldValueContext>();
		}
		public FieldValueContext fieldValue(int i) {
			return GetRuleContext<FieldValueContext>(i);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(ID);
			State = 202;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__14) {
				{
				{
				State = 199; fieldValue();
				}
				}
				State = 204;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 208;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__9) {
				{
				{
				State = 205; Match(T__9);
				}
				}
				State = 210;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return moduleName_sempred((ModuleNameContext)_localctx, predIndex);
		}
		return true;
	}
	private bool moduleName_sempred(ModuleNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\"\xD6\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x3\x2\a\x2$\n\x2\f\x2\xE\x2\'\v\x2\x3\x3\x3\x3\x5\x3"+
		"+\n\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\a\x5\x34\n\x5\f\x5\xE"+
		"\x5\x37\v\x5\x3\x5\x3\x5\a\x5;\n\x5\f\x5\xE\x5>\v\x5\x3\x6\x3\x6\x3\x6"+
		"\x5\x6\x43\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\aK\n\a\f\a\xE\aN\v\a\x3"+
		"\b\x3\b\x3\b\x3\b\a\bT\n\b\f\b\xE\bW\v\b\x3\b\x3\b\a\b[\n\b\f\b\xE\b^"+
		"\v\b\x3\t\x3\t\x3\t\x3\t\a\t\x64\n\t\f\t\xE\tg\v\t\x3\t\x3\t\x3\t\x3\n"+
		"\x3\n\x3\n\a\no\n\n\f\n\xE\nr\v\n\x3\n\x3\n\x3\n\x3\n\a\nx\n\n\f\n\xE"+
		"\n{\v\n\x5\n}\n\n\x3\v\x3\v\x3\v\x3\v\a\v\x83\n\v\f\v\xE\v\x86\v\v\x3"+
		"\v\x3\v\a\v\x8A\n\v\f\v\xE\v\x8D\v\v\x3\f\x3\f\x3\f\x3\f\x3\f\a\f\x94"+
		"\n\f\f\f\xE\f\x97\v\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x5\xE\xA3\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xB7"+
		"\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\xBD\n\x10\f\x10\xE\x10\xC0\v\x10"+
		"\x3\x10\x3\x10\a\x10\xC4\n\x10\f\x10\xE\x10\xC7\v\x10\x3\x11\x3\x11\a"+
		"\x11\xCB\n\x11\f\x11\xE\x11\xCE\v\x11\x3\x11\a\x11\xD1\n\x11\f\x11\xE"+
		"\x11\xD4\v\x11\x3\x11\x2\x2\x3\f\x12\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\x2"+
		"\x3\x3\x2\xF\x10\xE2\x2%\x3\x2\x2\x2\x4*\x3\x2\x2\x2\x6,\x3\x2\x2\x2\b"+
		"/\x3\x2\x2\x2\n\x42\x3\x2\x2\x2\f\x44\x3\x2\x2\x2\xEO\x3\x2\x2\x2\x10"+
		"_\x3\x2\x2\x2\x12|\x3\x2\x2\x2\x14~\x3\x2\x2\x2\x16\x8E\x3\x2\x2\x2\x18"+
		"\x9A\x3\x2\x2\x2\x1A\xA2\x3\x2\x2\x2\x1C\xB6\x3\x2\x2\x2\x1E\xB8\x3\x2"+
		"\x2\x2 \xC8\x3\x2\x2\x2\"$\x5\x4\x3\x2#\"\x3\x2\x2\x2$\'\x3\x2\x2\x2%"+
		"#\x3\x2\x2\x2%&\x3\x2\x2\x2&\x3\x3\x2\x2\x2\'%\x3\x2\x2\x2(+\x5\x6\x4"+
		"\x2)+\x5\b\x5\x2*(\x3\x2\x2\x2*)\x3\x2\x2\x2+\x5\x3\x2\x2\x2,-\a\x3\x2"+
		"\x2-.\a\x1F\x2\x2.\a\x3\x2\x2\x2/\x30\a\x4\x2\x2\x30\x31\x5\f\a\x2\x31"+
		"\x35\a\x5\x2\x2\x32\x34\x5\n\x6\x2\x33\x32\x3\x2\x2\x2\x34\x37\x3\x2\x2"+
		"\x2\x35\x33\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x38\x3\x2\x2\x2\x37\x35"+
		"\x3\x2\x2\x2\x38<\a\x6\x2\x2\x39;\a\a\x2\x2:\x39\x3\x2\x2\x2;>\x3\x2\x2"+
		"\x2<:\x3\x2\x2\x2<=\x3\x2\x2\x2=\t\x3\x2\x2\x2><\x3\x2\x2\x2?\x43\x5\x1E"+
		"\x10\x2@\x43\x5\x14\v\x2\x41\x43\x5\xE\b\x2\x42?\x3\x2\x2\x2\x42@\x3\x2"+
		"\x2\x2\x42\x41\x3\x2\x2\x2\x43\v\x3\x2\x2\x2\x44\x45\b\a\x1\x2\x45\x46"+
		"\a\x1C\x2\x2\x46L\x3\x2\x2\x2GH\f\x3\x2\x2HI\a\b\x2\x2IK\a\x1C\x2\x2J"+
		"G\x3\x2\x2\x2KN\x3\x2\x2\x2LJ\x3\x2\x2\x2LM\x3\x2\x2\x2M\r\x3\x2\x2\x2"+
		"NL\x3\x2\x2\x2OP\a\t\x2\x2PQ\a\x1C\x2\x2QU\a\x5\x2\x2RT\x5\x10\t\x2SR"+
		"\x3\x2\x2\x2TW\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2VX\x3\x2\x2\x2W"+
		"U\x3\x2\x2\x2X\\\a\x6\x2\x2Y[\a\a\x2\x2ZY\x3\x2\x2\x2[^\x3\x2\x2\x2\\"+
		"Z\x3\x2\x2\x2\\]\x3\x2\x2\x2]\xF\x3\x2\x2\x2^\\\x3\x2\x2\x2_`\x5\x1C\xF"+
		"\x2`\x61\a\x1C\x2\x2\x61\x65\a\n\x2\x2\x62\x64\x5\x12\n\x2\x63\x62\x3"+
		"\x2\x2\x2\x64g\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66"+
		"h\x3\x2\x2\x2g\x65\x3\x2\x2\x2hi\a\v\x2\x2ij\a\a\x2\x2j\x11\x3\x2\x2\x2"+
		"kl\x5\x1C\xF\x2lp\a\x1C\x2\x2mo\a\f\x2\x2nm\x3\x2\x2\x2or\x3\x2\x2\x2"+
		"pn\x3\x2\x2\x2pq\x3\x2\x2\x2q}\x3\x2\x2\x2rp\x3\x2\x2\x2st\a\r\x2\x2t"+
		"u\x5\x1C\xF\x2uy\a\x1C\x2\x2vx\a\f\x2\x2wv\x3\x2\x2\x2x{\x3\x2\x2\x2y"+
		"w\x3\x2\x2\x2yz\x3\x2\x2\x2z}\x3\x2\x2\x2{y\x3\x2\x2\x2|k\x3\x2\x2\x2"+
		"|s\x3\x2\x2\x2}\x13\x3\x2\x2\x2~\x7F\a\xE\x2\x2\x7F\x80\a\x1C\x2\x2\x80"+
		"\x84\a\x5\x2\x2\x81\x83\x5\x16\f\x2\x82\x81\x3\x2\x2\x2\x83\x86\x3\x2"+
		"\x2\x2\x84\x82\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x87\x3\x2\x2\x2\x86"+
		"\x84\x3\x2\x2\x2\x87\x8B\a\x6\x2\x2\x88\x8A\a\a\x2\x2\x89\x88\x3\x2\x2"+
		"\x2\x8A\x8D\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x15"+
		"\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8E\x8F\a\x1D\x2\x2\x8F\x90\x5\x18\r"+
		"\x2\x90\x91\x5\x1C\xF\x2\x91\x95\a\x1C\x2\x2\x92\x94\x5\x1A\xE\x2\x93"+
		"\x92\x3\x2\x2\x2\x94\x97\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x95\x96\x3\x2"+
		"\x2\x2\x96\x98\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x98\x99\a\a\x2\x2\x99\x17"+
		"\x3\x2\x2\x2\x9A\x9B\t\x2\x2\x2\x9B\x19\x3\x2\x2\x2\x9C\x9D\a\x11\x2\x2"+
		"\x9D\xA3\a\x1D\x2\x2\x9E\x9F\a\x11\x2\x2\x9F\xA3\a\x1E\x2\x2\xA0\xA1\a"+
		"\x11\x2\x2\xA1\xA3\a\x1F\x2\x2\xA2\x9C\x3\x2\x2\x2\xA2\x9E\x3\x2\x2\x2"+
		"\xA2\xA0\x3\x2\x2\x2\xA3\x1B\x3\x2\x2\x2\xA4\xB7\a\x1C\x2\x2\xA5\xB7\a"+
		"\x12\x2\x2\xA6\xB7\a\x13\x2\x2\xA7\xB7\a\x14\x2\x2\xA8\xB7\a\x15\x2\x2"+
		"\xA9\xAA\a\x16\x2\x2\xAA\xAB\a\x17\x2\x2\xAB\xAC\x5\x1C\xF\x2\xAC\xAD"+
		"\a\x18\x2\x2\xAD\xB7\x3\x2\x2\x2\xAE\xAF\a\x19\x2\x2\xAF\xB0\a\x17\x2"+
		"\x2\xB0\xB1\x5\x1C\xF\x2\xB1\xB2\a\f\x2\x2\xB2\xB3\x5\x1C\xF\x2\xB3\xB4"+
		"\a\x18\x2\x2\xB4\xB7\x3\x2\x2\x2\xB5\xB7\a\x1A\x2\x2\xB6\xA4\x3\x2\x2"+
		"\x2\xB6\xA5\x3\x2\x2\x2\xB6\xA6\x3\x2\x2\x2\xB6\xA7\x3\x2\x2\x2\xB6\xA8"+
		"\x3\x2\x2\x2\xB6\xA9\x3\x2\x2\x2\xB6\xAE\x3\x2\x2\x2\xB6\xB5\x3\x2\x2"+
		"\x2\xB7\x1D\x3\x2\x2\x2\xB8\xB9\a\x1B\x2\x2\xB9\xBA\a\x1C\x2\x2\xBA\xBE"+
		"\a\x5\x2\x2\xBB\xBD\x5 \x11\x2\xBC\xBB\x3\x2\x2\x2\xBD\xC0\x3\x2\x2\x2"+
		"\xBE\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC1\x3\x2\x2\x2\xC0\xBE\x3"+
		"\x2\x2\x2\xC1\xC5\a\x6\x2\x2\xC2\xC4\a\a\x2\x2\xC3\xC2\x3\x2\x2\x2\xC4"+
		"\xC7\x3\x2\x2\x2\xC5\xC3\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\x1F\x3\x2"+
		"\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xCC\a\x1C\x2\x2\xC9\xCB\x5\x1A\xE\x2\xCA"+
		"\xC9\x3\x2\x2\x2\xCB\xCE\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2"+
		"\x2\x2\xCD\xD2\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCF\xD1\a\f\x2\x2\xD0\xCF"+
		"\x3\x2\x2\x2\xD1\xD4\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2"+
		"\x2\xD3!\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\x17%*\x35<\x42LU\\\x65py|\x84"+
		"\x8B\x95\xA2\xB6\xBE\xC5\xCC\xD2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Tars.Net.CLI
