//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6-rc001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\GIT\github\CLI\src\Gen\Grammar.g4 by ANTLR 4.6.6-rc001

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Tars.Net.CLI.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6-rc001")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, ID=21, Int=22, Float=23, String=24, LineComment=25, 
		BlockComment=26, WS=27;
	public const int
		RULE_tarsDefinitions = 0, RULE_tarsDefinition = 1, RULE_includeDefinition = 2, 
		RULE_moduleDefinition = 3, RULE_memberDefinition = 4, RULE_moduleName = 5, 
		RULE_interfaceDefinition = 6, RULE_methodDefinition = 7, RULE_methodParameterDefinition = 8, 
		RULE_structDefinition = 9, RULE_fieldDefinition = 10, RULE_fieldOrder = 11, 
		RULE_fieldOption = 12, RULE_fieldValue = 13, RULE_typeDeclaration = 14, 
		RULE_enumDefinition = 15, RULE_enumDeclaration = 16, RULE_name = 17;
	public static readonly string[] ruleNames = {
		"tarsDefinitions", "tarsDefinition", "includeDefinition", "moduleDefinition", 
		"memberDefinition", "moduleName", "interfaceDefinition", "methodDefinition", 
		"methodParameterDefinition", "structDefinition", "fieldDefinition", "fieldOrder", 
		"fieldOption", "fieldValue", "typeDeclaration", "enumDefinition", "enumDeclaration", 
		"name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#include'", "'module'", "'{'", "'}'", "';'", "'.'", "'interface'", 
		"'('", "')'", "','", "'out'", "'struct'", "'='", "'require'", "'optional'", 
		"'vector'", "'<'", "'>'", "'map'", "'enum'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "ID", "Int", "Float", 
		"String", "LineComment", "BlockComment", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class TarsDefinitionsContext : ParserRuleContext {
		public TarsDefinitionContext[] tarsDefinition() {
			return GetRuleContexts<TarsDefinitionContext>();
		}
		public TarsDefinitionContext tarsDefinition(int i) {
			return GetRuleContext<TarsDefinitionContext>(i);
		}
		public TarsDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tarsDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterTarsDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitTarsDefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarsDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TarsDefinitionsContext tarsDefinitions() {
		TarsDefinitionsContext _localctx = new TarsDefinitionsContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_tarsDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__0 || _la==T__1) {
				{
				{
				State = 36; tarsDefinition();
				}
				}
				State = 41;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TarsDefinitionContext : ParserRuleContext {
		public IncludeDefinitionContext includeDefinition() {
			return GetRuleContext<IncludeDefinitionContext>(0);
		}
		public ModuleDefinitionContext moduleDefinition() {
			return GetRuleContext<ModuleDefinitionContext>(0);
		}
		public TarsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tarsDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterTarsDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitTarsDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarsDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TarsDefinitionContext tarsDefinition() {
		TarsDefinitionContext _localctx = new TarsDefinitionContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_tarsDefinition);
		try {
			State = 44;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42; includeDefinition();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43; moduleDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeDefinitionContext : ParserRuleContext {
		public ITerminalNode String() { return GetToken(GrammarParser.String, 0); }
		public IncludeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIncludeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIncludeDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeDefinitionContext includeDefinition() {
		IncludeDefinitionContext _localctx = new IncludeDefinitionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_includeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(T__0);
			State = 47; Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDefinitionContext : ParserRuleContext {
		public ModuleNameContext moduleName() {
			return GetRuleContext<ModuleNameContext>(0);
		}
		public MemberDefinitionContext[] memberDefinition() {
			return GetRuleContexts<MemberDefinitionContext>();
		}
		public MemberDefinitionContext memberDefinition(int i) {
			return GetRuleContext<MemberDefinitionContext>(i);
		}
		public ModuleDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterModuleDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitModuleDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDefinitionContext moduleDefinition() {
		ModuleDefinitionContext _localctx = new ModuleDefinitionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(T__1);
			State = 50; moduleName(0);
			State = 51; Match(T__2);
			State = 55;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__11) | (1L << T__19))) != 0)) {
				{
				{
				State = 52; memberDefinition();
				}
				}
				State = 57;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 58; Match(T__3);
			State = 60;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 59; Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDefinitionContext : ParserRuleContext {
		public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		public InterfaceDefinitionContext interfaceDefinition() {
			return GetRuleContext<InterfaceDefinitionContext>(0);
		}
		public MemberDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMemberDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMemberDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDefinitionContext memberDefinition() {
		MemberDefinitionContext _localctx = new MemberDefinitionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_memberDefinition);
		try {
			State = 65;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; enumDefinition();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; structDefinition();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 64; interfaceDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleNameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ModuleNameContext moduleName() {
			return GetRuleContext<ModuleNameContext>(0);
		}
		public ModuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterModuleName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitModuleName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleNameContext moduleName() {
		return moduleName(0);
	}

	private ModuleNameContext moduleName(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ModuleNameContext _localctx = new ModuleNameContext(_ctx, _parentState);
		ModuleNameContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_moduleName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 68; Match(ID);
			}
			_ctx.stop = _input.Lt(-1);
			State = 75;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ModuleNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_moduleName);
					State = 70;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 71; Match(T__5);
					State = 72; Match(ID);
					}
					} 
				}
				State = 77;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InterfaceDefinitionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public MethodDefinitionContext[] methodDefinition() {
			return GetRuleContexts<MethodDefinitionContext>();
		}
		public MethodDefinitionContext methodDefinition(int i) {
			return GetRuleContext<MethodDefinitionContext>(i);
		}
		public InterfaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterInterfaceDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitInterfaceDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDefinitionContext interfaceDefinition() {
		InterfaceDefinitionContext _localctx = new InterfaceDefinitionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_interfaceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(T__6);
			State = 79; name();
			State = 80; Match(T__2);
			State = 84;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__18) | (1L << ID))) != 0)) {
				{
				{
				State = 81; methodDefinition();
				}
				}
				State = 86;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 87; Match(T__3);
			State = 89;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 88; Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public MethodParameterDefinitionContext[] methodParameterDefinition() {
			return GetRuleContexts<MethodParameterDefinitionContext>();
		}
		public MethodParameterDefinitionContext methodParameterDefinition(int i) {
			return GetRuleContext<MethodParameterDefinitionContext>(i);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_methodDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; typeDeclaration();
			State = 92; name();
			State = 93; Match(T__7);
			State = 97;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__15) | (1L << T__18) | (1L << ID))) != 0)) {
				{
				{
				State = 94; methodParameterDefinition();
				}
				}
				State = 99;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 100; Match(T__8);
			State = 101; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParameterDefinitionContext : ParserRuleContext {
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public MethodParameterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameterDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMethodParameterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMethodParameterDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameterDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterDefinitionContext methodParameterDefinition() {
		MethodParameterDefinitionContext _localctx = new MethodParameterDefinitionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_methodParameterDefinition);
		int _la;
		try {
			State = 114;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__15:
			case T__18:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103; typeDeclaration();
				State = 104; name();
				State = 106;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__9) {
					{
					State = 105; Match(T__9);
					}
				}

				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; Match(T__10);
				State = 109; typeDeclaration();
				State = 110; name();
				State = 112;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__9) {
					{
					State = 111; Match(T__9);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public FieldDefinitionContext[] fieldDefinition() {
			return GetRuleContexts<FieldDefinitionContext>();
		}
		public FieldDefinitionContext fieldDefinition(int i) {
			return GetRuleContext<FieldDefinitionContext>(i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(T__11);
			State = 117; name();
			State = 118; Match(T__2);
			State = 122;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Int) {
				{
				{
				State = 119; fieldDefinition();
				}
				}
				State = 124;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 125; Match(T__3);
			State = 127;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 126; Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		public FieldOrderContext fieldOrder() {
			return GetRuleContext<FieldOrderContext>(0);
		}
		public FieldOptionContext fieldOption() {
			return GetRuleContext<FieldOptionContext>(0);
		}
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public FieldValueContext fieldValue() {
			return GetRuleContext<FieldValueContext>(0);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_fieldDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; fieldOrder();
			State = 130; fieldOption();
			State = 131; typeDeclaration();
			State = 132; name();
			State = 134;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__12) {
				{
				State = 133; Match(T__12);
				}
			}

			State = 137;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Int) | (1L << Float) | (1L << String))) != 0)) {
				{
				State = 136; fieldValue();
				}
			}

			State = 139; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOrderContext : ParserRuleContext {
		public ITerminalNode Int() { return GetToken(GrammarParser.Int, 0); }
		public FieldOrderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOrder; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFieldOrder(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFieldOrder(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldOrderContext fieldOrder() {
		FieldOrderContext _localctx = new FieldOrderContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_fieldOrder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(Int);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionContext : ParserRuleContext {
		public FieldOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFieldOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFieldOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldOptionContext fieldOption() {
		FieldOptionContext _localctx = new FieldOptionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_fieldOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			_la = _input.La(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldValueContext : ParserRuleContext {
		public ITerminalNode Int() { return GetToken(GrammarParser.Int, 0); }
		public ITerminalNode Float() { return GetToken(GrammarParser.Float, 0); }
		public ITerminalNode String() { return GetToken(GrammarParser.String, 0); }
		public FieldValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFieldValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFieldValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldValueContext fieldValue() {
		FieldValueContext _localctx = new FieldValueContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_fieldValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Int) | (1L << Float) | (1L << String))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_typeDeclaration);
		try {
			State = 160;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147; Match(ID);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148; Match(T__15);
				State = 149; Match(T__16);
				State = 150; typeDeclaration();
				State = 151; Match(T__17);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 3);
				{
				State = 153; Match(T__18);
				State = 154; Match(T__16);
				State = 155; typeDeclaration();
				State = 156; Match(T__9);
				State = 157; typeDeclaration();
				State = 158; Match(T__17);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EnumDeclarationContext[] enumDeclaration() {
			return GetRuleContexts<EnumDeclarationContext>();
		}
		public EnumDeclarationContext enumDeclaration(int i) {
			return GetRuleContext<EnumDeclarationContext>(i);
		}
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_enumDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(T__19);
			State = 163; name();
			State = 164; Match(T__2);
			State = 168;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ID) {
				{
				{
				State = 165; enumDeclaration();
				}
				}
				State = 170;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 171; Match(T__3);
			State = 173;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 172; Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public FieldValueContext fieldValue() {
			return GetRuleContext<FieldValueContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; name();
			State = 177;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__12) {
				{
				State = 176; Match(T__12);
				}
			}

			State = 180;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Int) | (1L << Float) | (1L << String))) != 0)) {
				{
				State = 179; fieldValue();
				}
			}

			State = 183;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__9) {
				{
				State = 182; Match(T__9);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return moduleName_sempred((ModuleNameContext)_localctx, predIndex);
		}
		return true;
	}
	private bool moduleName_sempred(ModuleNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1D\xBE\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x3\x2\a\x2(\n\x2\f\x2\xE"+
		"\x2+\v\x2\x3\x3\x3\x3\x5\x3/\n\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\a\x5\x38\n\x5\f\x5\xE\x5;\v\x5\x3\x5\x3\x5\x5\x5?\n\x5\x3\x6\x3"+
		"\x6\x3\x6\x5\x6\x44\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\aL\n\a\f\a\xE"+
		"\aO\v\a\x3\b\x3\b\x3\b\x3\b\a\bU\n\b\f\b\xE\bX\v\b\x3\b\x3\b\x5\b\\\n"+
		"\b\x3\t\x3\t\x3\t\x3\t\a\t\x62\n\t\f\t\xE\t\x65\v\t\x3\t\x3\t\x3\t\x3"+
		"\n\x3\n\x3\n\x5\nm\n\n\x3\n\x3\n\x3\n\x3\n\x5\ns\n\n\x5\nu\n\n\x3\v\x3"+
		"\v\x3\v\x3\v\a\v{\n\v\f\v\xE\v~\v\v\x3\v\x3\v\x5\v\x82\n\v\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x5\f\x89\n\f\x3\f\x5\f\x8C\n\f\x3\f\x3\f\x3\r\x3\r\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xA3\n\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\a\x11\xA9\n\x11\f\x11\xE\x11\xAC\v\x11\x3\x11\x3\x11\x5"+
		"\x11\xB0\n\x11\x3\x12\x3\x12\x5\x12\xB4\n\x12\x3\x12\x5\x12\xB7\n\x12"+
		"\x3\x12\x5\x12\xBA\n\x12\x3\x13\x3\x13\x3\x13\x2\x2\x3\f\x14\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2\x2\x4\x3\x2\x10\x11\x3\x2\x18\x1A\xC3\x2"+
		")\x3\x2\x2\x2\x4.\x3\x2\x2\x2\x6\x30\x3\x2\x2\x2\b\x33\x3\x2\x2\x2\n\x43"+
		"\x3\x2\x2\x2\f\x45\x3\x2\x2\x2\xEP\x3\x2\x2\x2\x10]\x3\x2\x2\x2\x12t\x3"+
		"\x2\x2\x2\x14v\x3\x2\x2\x2\x16\x83\x3\x2\x2\x2\x18\x8F\x3\x2\x2\x2\x1A"+
		"\x91\x3\x2\x2\x2\x1C\x93\x3\x2\x2\x2\x1E\xA2\x3\x2\x2\x2 \xA4\x3\x2\x2"+
		"\x2\"\xB1\x3\x2\x2\x2$\xBB\x3\x2\x2\x2&(\x5\x4\x3\x2\'&\x3\x2\x2\x2(+"+
		"\x3\x2\x2\x2)\'\x3\x2\x2\x2)*\x3\x2\x2\x2*\x3\x3\x2\x2\x2+)\x3\x2\x2\x2"+
		",/\x5\x6\x4\x2-/\x5\b\x5\x2.,\x3\x2\x2\x2.-\x3\x2\x2\x2/\x5\x3\x2\x2\x2"+
		"\x30\x31\a\x3\x2\x2\x31\x32\a\x1A\x2\x2\x32\a\x3\x2\x2\x2\x33\x34\a\x4"+
		"\x2\x2\x34\x35\x5\f\a\x2\x35\x39\a\x5\x2\x2\x36\x38\x5\n\x6\x2\x37\x36"+
		"\x3\x2\x2\x2\x38;\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2:<\x3"+
		"\x2\x2\x2;\x39\x3\x2\x2\x2<>\a\x6\x2\x2=?\a\a\x2\x2>=\x3\x2\x2\x2>?\x3"+
		"\x2\x2\x2?\t\x3\x2\x2\x2@\x44\x5 \x11\x2\x41\x44\x5\x14\v\x2\x42\x44\x5"+
		"\xE\b\x2\x43@\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43\x42\x3\x2\x2\x2\x44"+
		"\v\x3\x2\x2\x2\x45\x46\b\a\x1\x2\x46G\a\x17\x2\x2GM\x3\x2\x2\x2HI\f\x3"+
		"\x2\x2IJ\a\b\x2\x2JL\a\x17\x2\x2KH\x3\x2\x2\x2LO\x3\x2\x2\x2MK\x3\x2\x2"+
		"\x2MN\x3\x2\x2\x2N\r\x3\x2\x2\x2OM\x3\x2\x2\x2PQ\a\t\x2\x2QR\x5$\x13\x2"+
		"RV\a\x5\x2\x2SU\x5\x10\t\x2TS\x3\x2\x2\x2UX\x3\x2\x2\x2VT\x3\x2\x2\x2"+
		"VW\x3\x2\x2\x2WY\x3\x2\x2\x2XV\x3\x2\x2\x2Y[\a\x6\x2\x2Z\\\a\a\x2\x2["+
		"Z\x3\x2\x2\x2[\\\x3\x2\x2\x2\\\xF\x3\x2\x2\x2]^\x5\x1E\x10\x2^_\x5$\x13"+
		"\x2_\x63\a\n\x2\x2`\x62\x5\x12\n\x2\x61`\x3\x2\x2\x2\x62\x65\x3\x2\x2"+
		"\x2\x63\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x66\x3\x2\x2\x2\x65\x63"+
		"\x3\x2\x2\x2\x66g\a\v\x2\x2gh\a\a\x2\x2h\x11\x3\x2\x2\x2ij\x5\x1E\x10"+
		"\x2jl\x5$\x13\x2km\a\f\x2\x2lk\x3\x2\x2\x2lm\x3\x2\x2\x2mu\x3\x2\x2\x2"+
		"no\a\r\x2\x2op\x5\x1E\x10\x2pr\x5$\x13\x2qs\a\f\x2\x2rq\x3\x2\x2\x2rs"+
		"\x3\x2\x2\x2su\x3\x2\x2\x2ti\x3\x2\x2\x2tn\x3\x2\x2\x2u\x13\x3\x2\x2\x2"+
		"vw\a\xE\x2\x2wx\x5$\x13\x2x|\a\x5\x2\x2y{\x5\x16\f\x2zy\x3\x2\x2\x2{~"+
		"\x3\x2\x2\x2|z\x3\x2\x2\x2|}\x3\x2\x2\x2}\x7F\x3\x2\x2\x2~|\x3\x2\x2\x2"+
		"\x7F\x81\a\x6\x2\x2\x80\x82\a\a\x2\x2\x81\x80\x3\x2\x2\x2\x81\x82\x3\x2"+
		"\x2\x2\x82\x15\x3\x2\x2\x2\x83\x84\x5\x18\r\x2\x84\x85\x5\x1A\xE\x2\x85"+
		"\x86\x5\x1E\x10\x2\x86\x88\x5$\x13\x2\x87\x89\a\xF\x2\x2\x88\x87\x3\x2"+
		"\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8B\x3\x2\x2\x2\x8A\x8C\x5\x1C\xF\x2\x8B"+
		"\x8A\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8E\a\a\x2"+
		"\x2\x8E\x17\x3\x2\x2\x2\x8F\x90\a\x18\x2\x2\x90\x19\x3\x2\x2\x2\x91\x92"+
		"\t\x2\x2\x2\x92\x1B\x3\x2\x2\x2\x93\x94\t\x3\x2\x2\x94\x1D\x3\x2\x2\x2"+
		"\x95\xA3\a\x17\x2\x2\x96\x97\a\x12\x2\x2\x97\x98\a\x13\x2\x2\x98\x99\x5"+
		"\x1E\x10\x2\x99\x9A\a\x14\x2\x2\x9A\xA3\x3\x2\x2\x2\x9B\x9C\a\x15\x2\x2"+
		"\x9C\x9D\a\x13\x2\x2\x9D\x9E\x5\x1E\x10\x2\x9E\x9F\a\f\x2\x2\x9F\xA0\x5"+
		"\x1E\x10\x2\xA0\xA1\a\x14\x2\x2\xA1\xA3\x3\x2\x2\x2\xA2\x95\x3\x2\x2\x2"+
		"\xA2\x96\x3\x2\x2\x2\xA2\x9B\x3\x2\x2\x2\xA3\x1F\x3\x2\x2\x2\xA4\xA5\a"+
		"\x16\x2\x2\xA5\xA6\x5$\x13\x2\xA6\xAA\a\x5\x2\x2\xA7\xA9\x5\"\x12\x2\xA8"+
		"\xA7\x3\x2\x2\x2\xA9\xAC\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB\x3\x2"+
		"\x2\x2\xAB\xAD\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAD\xAF\a\x6\x2\x2\xAE"+
		"\xB0\a\a\x2\x2\xAF\xAE\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0!\x3\x2\x2\x2"+
		"\xB1\xB3\x5$\x13\x2\xB2\xB4\a\xF\x2\x2\xB3\xB2\x3\x2\x2\x2\xB3\xB4\x3"+
		"\x2\x2\x2\xB4\xB6\x3\x2\x2\x2\xB5\xB7\x5\x1C\xF\x2\xB6\xB5\x3\x2\x2\x2"+
		"\xB6\xB7\x3\x2\x2\x2\xB7\xB9\x3\x2\x2\x2\xB8\xBA\a\f\x2\x2\xB9\xB8\x3"+
		"\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA#\x3\x2\x2\x2\xBB\xBC\a\x17\x2\x2\xBC"+
		"%\x3\x2\x2\x2\x18).\x39>\x43MV[\x63lrt|\x81\x88\x8B\xA2\xAA\xAF\xB3\xB6"+
		"\xB9";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Tars.Net.CLI.Grammar
